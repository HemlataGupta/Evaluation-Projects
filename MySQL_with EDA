USE Chinook;

-- Exercise 1
-- QUERY 1: Explore PlaylistTrack
SELECT * FROM PlaylistTrack;

-- QUERY 2: How many track does each playlist have? Order from largest to smallest playlist.
SELECT PlaylistId, COUNT(TrackId) AS NbTrack 
FROM PlaylistTrack
GROUP BY PlaylistId
ORDER BY NbTrack DESC;

-- QUERY 3: Same query, ordered by playlist id (ascending). What do you observe?
SELECT PlaylistId, COUNT(TrackId) AS NbTrack 
FROM PlaylistTrack
GROUP BY PlaylistId
ORDER BY PlaylistId ASC;

-- QUERY 4: Identify the rows where either TrackId or PlaylistId is NULL (PlaylistTrack table).
SELECT *
FROM PlaylistTrack 
WHERE TrackId IS NULL OR PlaylistId IS NULL;

-- QUERY 5: Do those missing playlists exist? 
SELECT * FROM Chinook.Playlist;

-- QUERY 6: Show the number of tracks for each playlist that have more than 100 tracks.
SELECT PlaylistId, COUNT(TrackId) AS NbTrack 
FROM PlaylistTrack
GROUP BY PlaylistId
HAVING NbTrack >= 100
ORDER BY NbTrack DESC;

-- QUERY 7: Show the number of tracks for each playlist with an even PlaylistId that have more than 100 tracks.
SELECT PlaylistId, COUNT(TrackId) AS NbTrack 
FROM PlaylistTrack
WHERE PlaylistId % 2 = 0
GROUP BY PlaylistId
HAVING NbTrack >= 100
ORDER BY NbTrack DESC;


-- Exercise 2
-- QUERY 8: Join table PlaylistTrack with Playlist
SELECT *
FROM PlaylistTrack INNER JOIN Playlist 
ON PlaylistTrack.PlaylistId = Playlist.PlaylistId;

-- QUERY 9: Join table PlaylistTrack with Playlist without any column duplicate
SELECT PlaylistTrack.PlaylistId, TrackId, Name
FROM PlaylistTrack INNER JOIN Playlist 
ON PlaylistTrack.PlaylistId = Playlist.PlaylistId;

-- QUERY 10: Join table PlaylistTrack with Playlist without any column duplicate and using aliases in your code (AS)
SELECT PT.PlaylistId, TrackId, Name
FROM PlaylistTrack AS PT INNER JOIN Playlist AS P
ON PT.PlaylistId = P.PlaylistId;

-- QUERY 11: How many track does each playlist have? Show the name of the playlist in your result.
SELECT PT.PlaylistId, COUNT(TrackId) AS NbTrack, Name
FROM PlaylistTrack AS PT INNER JOIN Playlist AS P
ON PT.PlaylistId = P.PlaylistId
GROUP BY PT.PlaylistId;

-- QUERY 12: Same query, but group it by Name. Explain the result.
SELECT PT.PlaylistId, COUNT(TrackId) AS NbTrack, Name
FROM PlaylistTrack AS PT INNER JOIN Playlist AS P
ON PT.PlaylistId = P.PlaylistId
GROUP BY Name;


-- Exercise 3: More JOINs
-- QUERY 13: Count the number of albums for each genre. Order the results by most to least popular genre.
SELECT GenreId, COUNT(DISTINCT AlbumId) AS NbAlbum
FROM Track
GROUP BY GenreId
ORDER BY NbAlbum DESC;

-- QUERY 14: Show the same result and add the name of the genre.
SELECT Track.GenreId, Genre.Name, COUNT(DISTINCT AlbumId) AS NbAlbum
FROM Track INNER JOIN Genre ON Track.GenreId = Genre.GenreId
GROUP BY Track.GenreId
ORDER BY NbAlbum DESC;

-- QUERY 15: Count the number of playlists for each genre. Order the results by most to least popular genre.
SELECT Track.GenreId, Genre.Name, COUNT(DISTINCT PlaylistId) AS NbPlaylist
FROM Track 
INNER JOIN Genre ON Track.GenreId = Genre.GenreId
INNER JOIN PlaylistTrack ON PlaylistTrack.TrackId = Track.TrackId
GROUP BY Track.GenreId
ORDER BY NbPlaylist DESC;

-- QUERY 16: Test LEFT, RIGHT, INNER JOINS with Playlist and the result of QUERY 3
SELECT * FROM Playlist LEFT JOIN 
(SELECT PlaylistId, COUNT(TrackId) AS NbTrack 
FROM PlaylistTrack
GROUP BY PlaylistId
ORDER BY PlaylistId ASC) AS Q3
ON Playlist.PlaylistId = Q3.PlaylistId;

-- QUERY 17: Which playlist or playlists have no tracks? 
SELECT Playlist.Name, Playlist.PlaylistId, PlaylistTrack.TrackId
FROM Playlist
LEFT JOIN PlaylistTrack
ON Playlist.PlaylistId = PlaylistTrack.PlaylistId
WHERE PlaylistTrack.TrackId IS NULL;

-- Multiple ways to do so by checking the count of tracks in each playlist
SELECT Playlist.Name, Playlist.PlaylistId, COUNT(PlaylistTrack.TrackId) AS NbTrack
FROM Playlist LEFT JOIN PlaylistTrack
ON (Playlist.PlaylistId = PlaylistTrack.PlaylistId)
GROUP BY Playlist.PlaylistId
HAVING NbTrack = 0;